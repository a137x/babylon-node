/*
 * Radix System API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to information about the node itself, its configuration, status and subsystems.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against ledger state, you may also wish to consider using the [Core API or Gateway API instead](https://docs-babylon.radixdlt.com/main/apis/api-specification.html). 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.system.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.system.generated.models.EnactUnconditionallyAtEpochCondition;
import com.radixdlt.api.system.generated.models.EnactUnconditionallyAtStateVersionCondition;
import com.radixdlt.api.system.generated.models.EnactWhenSupportedAndWithinBoundsCondition;
import com.radixdlt.api.system.generated.models.EnactWhenSupportedAndWithinBoundsConditionAllOf;
import com.radixdlt.api.system.generated.models.ProtocolUpdateEnactmentBound;
import com.radixdlt.api.system.generated.models.ProtocolUpdateEnactmentCondition;
import com.radixdlt.api.system.generated.models.ProtocolUpdateEnactmentConditionType;
import com.radixdlt.api.system.generated.models.ProtocolUpdateSupportType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.radixdlt.api.common.JSON;
/**
 * EnactWhenSupportedAndWithinBoundsCondition
 */
@JsonPropertyOrder({
  EnactWhenSupportedAndWithinBoundsCondition.JSON_PROPERTY_LOWER_BOUND,
  EnactWhenSupportedAndWithinBoundsCondition.JSON_PROPERTY_UPPER_BOUND,
  EnactWhenSupportedAndWithinBoundsCondition.JSON_PROPERTY_SUPPORT_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = EnactUnconditionallyAtEpochCondition.class, name = "EnactUnconditionallyAtEpoch"),
  @JsonSubTypes.Type(value = EnactUnconditionallyAtStateVersionCondition.class, name = "EnactUnconditionallyAtStateVersion"),
  @JsonSubTypes.Type(value = EnactWhenSupportedAndWithinBoundsCondition.class, name = "EnactWhenSupportedAndWithinBounds"),
})

public class EnactWhenSupportedAndWithinBoundsCondition extends ProtocolUpdateEnactmentCondition {
  public static final String JSON_PROPERTY_LOWER_BOUND = "lower_bound";
  private ProtocolUpdateEnactmentBound lowerBound;

  public static final String JSON_PROPERTY_UPPER_BOUND = "upper_bound";
  private ProtocolUpdateEnactmentBound upperBound;

  public static final String JSON_PROPERTY_SUPPORT_TYPE = "support_type";
  private ProtocolUpdateSupportType supportType;


  public EnactWhenSupportedAndWithinBoundsCondition lowerBound(ProtocolUpdateEnactmentBound lowerBound) {
    this.lowerBound = lowerBound;
    return this;
  }

   /**
   * Get lowerBound
   * @return lowerBound
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LOWER_BOUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ProtocolUpdateEnactmentBound getLowerBound() {
    return lowerBound;
  }


  @JsonProperty(JSON_PROPERTY_LOWER_BOUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLowerBound(ProtocolUpdateEnactmentBound lowerBound) {
    this.lowerBound = lowerBound;
  }


  public EnactWhenSupportedAndWithinBoundsCondition upperBound(ProtocolUpdateEnactmentBound upperBound) {
    this.upperBound = upperBound;
    return this;
  }

   /**
   * Get upperBound
   * @return upperBound
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UPPER_BOUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ProtocolUpdateEnactmentBound getUpperBound() {
    return upperBound;
  }


  @JsonProperty(JSON_PROPERTY_UPPER_BOUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpperBound(ProtocolUpdateEnactmentBound upperBound) {
    this.upperBound = upperBound;
  }


  public EnactWhenSupportedAndWithinBoundsCondition supportType(ProtocolUpdateSupportType supportType) {
    this.supportType = supportType;
    return this;
  }

   /**
   * Get supportType
   * @return supportType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUPPORT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ProtocolUpdateSupportType getSupportType() {
    return supportType;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSupportType(ProtocolUpdateSupportType supportType) {
    this.supportType = supportType;
  }


  /**
   * Return true if this EnactWhenSupportedAndWithinBoundsCondition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnactWhenSupportedAndWithinBoundsCondition enactWhenSupportedAndWithinBoundsCondition = (EnactWhenSupportedAndWithinBoundsCondition) o;
    return Objects.equals(this.lowerBound, enactWhenSupportedAndWithinBoundsCondition.lowerBound) &&
        Objects.equals(this.upperBound, enactWhenSupportedAndWithinBoundsCondition.upperBound) &&
        Objects.equals(this.supportType, enactWhenSupportedAndWithinBoundsCondition.supportType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lowerBound, upperBound, supportType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnactWhenSupportedAndWithinBoundsCondition {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    lowerBound: ").append(toIndentedString(lowerBound)).append("\n");
    sb.append("    upperBound: ").append(toIndentedString(upperBound)).append("\n");
    sb.append("    supportType: ").append(toIndentedString(supportType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("EnactUnconditionallyAtEpoch", EnactUnconditionallyAtEpochCondition.class);
  mappings.put("EnactUnconditionallyAtStateVersion", EnactUnconditionallyAtStateVersionCondition.class);
  mappings.put("EnactWhenSupportedAndWithinBounds", EnactWhenSupportedAndWithinBoundsCondition.class);
  mappings.put("EnactWhenSupportedAndWithinBoundsCondition", EnactWhenSupportedAndWithinBoundsCondition.class);
  JSON.registerDiscriminator(EnactWhenSupportedAndWithinBoundsCondition.class, "type", mappings);
}
}

