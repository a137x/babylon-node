name: Unit, integration tests and sonar

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    # Runs on all PRs
  push:
    branches:
      - develop
      - main
      - release\/*
jobs:
  snyk-scan-deps-licences:
    name: Snyk deps/licences scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: read
      contents: read
      deployments: write
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: ${{ secrets.AWS_ROLE_NAME_SNYK_SECRET }}
          app_name: 'babylon-node'
          step_name: 'snyk-scan-deps-licenses'
          secret_prefix: 'SNYK'
          secret_name: ${{ secrets.AWS_SECRET_NAME_SNYK }}
          parse_json: true
      - name: Run Snyk to check for deps vulnerabilities
        uses: snyk/actions/gradle-jdk17@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
        with:
          args: --all-projects --org=${{ env.SNYK_NETWORK_ORG_ID }} --severity-threshold=critical
  snyk-scan-code:
    name: Snyk code scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: read
      contents: read
      deployments: write
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: ${{ secrets.AWS_ROLE_NAME_SNYK_SECRET }}
          app_name: 'babylon-node'
          step_name: 'snyk-scan-code'
          secret_prefix: 'SNYK'
          secret_name: ${{ secrets.AWS_SECRET_NAME_SNYK }}
          parse_json: true
      - name: Run Snyk to check for code vulnerabilities
        uses: snyk/actions/gradle-jdk17@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
        with:
          args: --all-projects --org=${{ env.SNYK_NETWORK_ORG_ID }} --severity-threshold=high
          command: code test
  snyk-sbom:
    name: Snyk SBOM
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: read
      contents: read
      deployments: write
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: ${{ secrets.AWS_ROLE_NAME_SNYK_SECRET }}
          app_name: 'babylon-node'
          step_name: 'snyk-sbom'
          secret_prefix: 'SNYK'
          secret_name: ${{ secrets.AWS_SECRET_NAME_SNYK }}
          parse_json: true
      - name: Generate SBOM # check SBOM can be generated but nothing is done with it
        uses: snyk/actions/gradle-jdk17@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
        with:
          args: --all-projects --org=${{ env.SNYK_NETWORK_ORG_ID }} --format=cyclonedx1.4+json --json-file-output sbom.json
          command: sbom
  build:
    name: Unit tests and sonarqube
    runs-on: babylon-runner
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - uses: RDXWorks-actions/rust-toolchain@master
        with:
          toolchain: stable
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Install libclang-dev
        run: sudo apt-get update -y && sudo apt-get install -y libclang-dev
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Unit tests
        run: ./gradlew clean check jacocoTestReport --stacktrace --refresh-dependencies
      - name: DistZip
        run: ./gradlew distZip
      - name: Publish Java distZip
        uses: actions/upload-artifact@v3
        with:
          path: ./core/build/distributions/core-*.zip
          name: distZip
          retention-days: 7
      - uses: ./.github/actions/fetch-secrets
        with: 
          role_name: "${{ secrets.COMMON_SECRETS_ROLE_ARN }}"
          app_name: "babylon-node"
          step_name: "build"
          secret_prefix: "SONAR"
          # SonarCloud access token should be generated from https://sonarcloud.io/account/security/
          secret_name: "github-actions/common/sonar-token"
          parse_json: true
      - name: Sonar analysis
        env:
          # Needed to get some information about the pull request, if any
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew sonarqube
  local-dev-sm-docker-build:
    name: Test core-rust docker build for local development
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - uses: RDXWorks-actions/rust-toolchain@master
        with:
          toolchain: stable
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Run local core-rust docker build
        run: ./gradlew :core-rust:buildRustForDocker
  steadystate-integration:
    name: Steady state integration tests
    runs-on: babylon-runner
    steps:
      - uses: actions/checkout@v3
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - uses: RDXWorks-actions/rust-toolchain@master
        with:
          toolchain: stable
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Install libclang-dev
        run: sudo apt-get update -y && sudo apt-get install -y libclang-dev
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Run steady-state integration tests
        # If you need better logging, you should add --info to the below command to output application logs.
        run: ./gradlew clean runSteadyStateIntegrationTests --refresh-dependencies
  targeted-integration:
    name: Targeted integration tests
    runs-on: babylon-runner
    steps:
      - uses: actions/checkout@v3
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - uses: RDXWorks-actions/rust-toolchain@master
        with:
          toolchain: stable
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Install libclang-dev
        run: sudo apt-get update -y && sudo apt-get install -y libclang-dev
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Run targeted integration tests
        # If you need better logging, you should add --info to the below command to output application logs.
        run: ./gradlew clean runTargetedIntegrationTests --refresh-dependencies --parallel
  cross-xwin:
    name: Cross compile to Windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: RDXWorks-actions/rust-toolchain@master
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc
      - name: Install clang
        run: sudo apt-get update -y && sudo apt-get install -y clang libclang-dev llvm llvm-dev
      - name: Install cargo-xwin
        run: cargo install cargo-xwin
      - name: cross compile to windows
        run: pushd core-rust; cargo xwin build --release --target x86_64-pc-windows-msvc
      - name: Publish corerust.dll
        uses: actions/upload-artifact@v3
        with:
          path: core-rust/target/x86_64-pc-windows-msvc/release/corerust.dll
          name: corerust.dll
          retention-days: 7
